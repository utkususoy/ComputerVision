# -*- coding: utf-8 -*-
"""guiTest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yVUIaS6D4NfBRZkGVu6RpIYsl78niSaY
"""

from keras.models import model_from_json
json_file = open('../stanford_dataSet/data/model_inception_v3.json', 'r')
loaded_model_json = json_file.read()
json_file.close()
loaded_model = model_from_json(loaded_model_json)

loaded_model.load_weights("../stanford_dataSet/data/model_inception_v3.h5")
print("Loaded model from disk")

loaded_model.summary()

input_size = 300
batch_size = 16

from keras.applications.inception_v3 import InceptionV3
inception_model = InceptionV3(include_top=False, weights='imagenet', input_shape=(input_size,input_size,3))



from tkinter import *
from glob import glob
import numpy as np
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
# loading Python Imaging Library 
from PIL import ImageTk, Image 
  
# To get the dialog box to open when required  
import tkinter as tk
from tkinter import filedialog
from os import listdir
from os.path import isfile, join

global textLabel, inputTextLabel, outputTextLabel

def openfilename(): 
    onlyfiles = []
    selectedIndex = 0
    i = 0;
    mypath = '../stanford_dataSet/data/prediction/alman'

    for f in listdir(mypath):
        onlyfiles.append(mypath+ '/' +f)
        
    print(onlyfiles)
   
    # open file dialog box to select image 
    # The dialogue box has a title "Open" 
    filename = filedialog.askopenfilename(title ='"pen') 
    print(filename)

    for f in onlyfiles:
        if f == filename:
            selectedIndex = i
        i = i+1
    
    print(selectedIndex)
    return filename, selectedIndex 

def predictionPahes(value):
    global nameOfDog
    train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        rotation_range=30,
        width_shift_range=0.1,
        height_shift_range=0.1,
        horizontal_flip=True) 
    
    dog_img = train_datagen.flow_from_directory(
        directory="../stanford_dataSet/data/prediction/",
        target_size=(input_size, input_size),
        color_mode="rgb",
        batch_size=batch_size,
        class_mode="categorical",
        shuffle=False,
        seed=42    
    )
    dog_img_v3 = inception_model.predict_generator(dog_img)

    root='../stanford_dataSet/data/train/breed'
    dogsNameList = [ item for item in os.listdir(root) if os.path.isdir(os.path.join(root, item)) ]
    predicted_dog = loaded_model.predict(dog_img_v3)
    dogsNameList[np.argmax(predicted_dog[value])]
    path = '../stanford_dataSet/data/train/breed/' + dogsNameList[np.argmax(predicted_dog[value])]

    def load_images_from_folder(folder):
        images = []
        for filename in os.listdir(folder):
            img = cv2.imread(os.path.join(folder,filename))
            if img is not None:
                images.append(img)
        return images

    image_list = load_images_from_folder(path)
    selected_img = cv2.cvtColor(image_list[1],cv2.COLOR_BGR2RGB)
    nameOfDog = dogsNameList[np.argmax(predicted_dog[value])]
    return selected_img


def open_img(): 
    # Select the Imagename  from a folder  
    x,z = openfilename()
    y = x 
    outputTextLabel = tk.Label(root)
    img2 = predictionPahes(z)

    # opens the image 
    outputTextLabel.destroy()
    outputTextLabel = tk.Label(root, text = "Species Result :  "+nameOfDog )
    outputTextLabel.grid(column = 15, row = 20)
    inputTextLabel.grid(column = 0, row = 20)
   
    img = Image.open(x)
    img2 = Image.fromarray(img2)
    
    # resize the image and apply a high-quality down sampling filter 
    img = img.resize((400, 400), Image.ANTIALIAS) 
    img2 = img2.resize((400, 400), Image.ANTIALIAS) 

    # PhotoImage class is used to add image to widgets, icons etc 
    img = ImageTk.PhotoImage(img) 
    img2 = ImageTk.PhotoImage(img2)
   
    # create a label 
    panel = Label(root, image = img) 
    panel2 = Label(root, image = img2)
      
    # set the image as img  
    panel.image = img
    panel.grid(row = 2) 
    
    panel2.image = img2
    panel2.grid(row = 2, column = 15)
       
def hide_me(event):
    event.widget.pack_forget()    

# Create a windoe 
root = Tk() 
inputTextLabel = tk.Label(root, text = "Your Dog")
inputTextLabel.pack_forget()

# Set Title as Image Loader 
root.title("Image Loader") 
 
# Set the resolution of window 
root.geometry("1000x600") 
  
# Allow Window to be resizable 
root.resizable(width = True, height = True) 
  
# Create a button and place it into the window using grid layout 
btn = Button(root, text ='Select your dog image please', command = open_img).grid( 
                                        row =1, column = 1) 

root.mainloop()